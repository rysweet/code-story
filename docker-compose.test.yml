services:
  neo4j:
    image: neo4j:5.18.0-enterprise
    container_name: codestory-neo4j-test
    ports:
      - "7475:7474"  # HTTP - using different port to avoid conflicts
      - "7688:7687"  # Bolt - using different port to avoid conflicts
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_initial_dbms_default__database=testdb
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes  # Required for enterprise edition
    volumes:
      - neo4j_test_data:/data
      - neo4j_test_logs:/logs
      - ./tests/fixtures/cypher:/import  # Mount fixtures directory for data import
    healthcheck:
      test: "wget -O /dev/null -q http://localhost:7474 || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: on-failure

  redis:
    image: redis:7.2.4-alpine
    container_name: codestory-redis-test
    ports:
      - "6380:6379"  # Using different port to avoid conflicts
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    restart: on-failure

  service:
    image: python:3.12-slim
    container_name: codestory-service
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ~/.azure:/root/.azure
    working_dir: /app
    command: >
      bash -c "apt-get update && apt-get install -y curl build-essential gnupg lsb-release && \
      curl -sL https://aka.ms/InstallAzureCLIDeb | bash && \
      adduser --disabled-password --gecos '' appuser && \
      chown -R appuser:appuser /app && \
      mkdir -p /home/appuser/.local/bin && \
      mkdir -p /home/appuser/.azure && \
      cp -r /root/.azure/* /home/appuser/.azure/ || true && \
      chown -R appuser:appuser /home/appuser && \
      cd /app && bash /app/scripts/setup_container_config.sh && \
      su appuser -c '
        python -m venv /app/.venv &&
        . /app/.venv/bin/activate &&
        pip install --upgrade pip &&
        pip install -e . &&
        pip install azure-identity azure-keyvault-secrets &&
        cp /app/.codestory.container.toml /app/.codestory.toml &&
        python /app/patch_adapters.py &&
        python -m codestory_service.main
      '"
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy
    environment:
      - NEO4J__URI=bolt://neo4j:7687
      - NEO4J__USERNAME=neo4j
      - NEO4J__PASSWORD=password
      - NEO4J__DATABASE=testdb
      - REDIS__URI=redis://redis:6379/0
      - REDIS__HOST=redis
      - REDIS__PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CODESTORY_SERVICE_HOST=0.0.0.0
      - CODESTORY_SERVICE_PORT=8000
      - USE_REAL_ADAPTERS=1

  worker:
    image: python:3.12-slim
    container_name: codestory-worker
    volumes:
      - .:/app
      - ~/.azure:/root/.azure
    working_dir: /app
    command: >
      bash -c "apt-get update && apt-get install -y curl build-essential gnupg lsb-release && \
      curl -sL https://aka.ms/InstallAzureCLIDeb | bash && \
      adduser --disabled-password --gecos '' appuser && \
      chown -R appuser:appuser /app && \
      mkdir -p /home/appuser/.local/bin && \
      mkdir -p /home/appuser/.azure && \
      cp -r /root/.azure/* /home/appuser/.azure/ || true && \
      chown -R appuser:appuser /home/appuser && \
      cd /app && bash /app/scripts/setup_container_config.sh && \
      su appuser -c '
        python -m venv /app/.venv &&
        . /app/.venv/bin/activate &&
        pip install --upgrade pip &&
        pip install -e . &&
        pip install docker azure-identity &&
        cp /app/.codestory.container.toml /app/.codestory.toml &&
        cd /app && PYTHONPATH=/app python -m celery -A codestory.ingestion_pipeline.celery_app worker --loglevel=INFO --concurrency=4 -Q ingestion
      '"
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NEO4J__URI=bolt://neo4j:7687
      - NEO4J__USERNAME=neo4j
      - NEO4J__PASSWORD=password
      - NEO4J__DATABASE=testdb
      - REDIS__URI=redis://redis:6379/0
      - REDIS__HOST=redis
      - REDIS__PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - WORKER_CONCURRENCY=4
      - WORKER_LOGLEVEL=INFO
      - C_FORCE_ROOT=1

volumes:
  neo4j_test_data:
    name: codestory-neo4j-test-data
  neo4j_test_logs:
    name: codestory-neo4j-test-logs
  redis_test_data:
    name: codestory-redis-test-data