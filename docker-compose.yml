services:
  neo4j:
    image: neo4j:${NEO4J_VERSION:-5.18.0-enterprise}
    container_name: ${CONTAINER_PREFIX:-codestory}-neo4j
    ports:
      - "${NEO4J_HTTP_PORT:-7476}:7474"
      - "${NEO4J_BOLT_PORT:-7689}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=${NEO4J_MEMORY_HEAP_INITIAL:-512m}
      - NEO4J_dbms_memory_heap_max__size=${NEO4J_MEMORY_HEAP_MAX:-2G}
      - NEO4J_dbms_memory_pagecache_size=${NEO4J_MEMORY_PAGECACHE:-512m}
      - NEO4J_initial_dbms_default__database=${NEO4J_DATABASE:-neo4j}
      - NEO4J_server_config_strict__validation_enabled=false
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - ${CONTAINER_PREFIX:-codestory}_neo4j_data:/data
      - ${CONTAINER_PREFIX:-codestory}_neo4j_logs:/logs
      - ${CONTAINER_PREFIX:-codestory}_neo4j_import:/var/lib/neo4j/import
      - ${CONTAINER_PREFIX:-codestory}_neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:${REDIS_VERSION:-7.2.4-alpine}
    container_name: ${CONTAINER_PREFIX:-codestory}-redis
    ports:
      - "${REDIS_PORT:-6389}:6379"
    volumes:
      - ${CONTAINER_PREFIX:-codestory}_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Add a real Celery worker
  worker:
    image: python:${PYTHON_VERSION:-3.12-slim}
    container_name: ${CONTAINER_PREFIX:-codestory}-worker
    volumes:
      - .:/app
      - ${REPOSITORY_PATH:-~/repositories}:/repositories
      - ${REPOSITORY_SOURCE:-$HOME/repositories}:${REPOSITORY_DEST:-/repositories}
      - ~/.azure:/root/.azure
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    command: >
      bash -c "apt-get update && apt-get install -y curl build-essential gnupg lsb-release docker.io &&
      curl -sL https://aka.ms/InstallAzureCLIDeb | bash &&
      groupadd -f docker &&
      adduser --disabled-password --gecos '' appuser &&
      usermod -aG docker appuser &&
      chown -R appuser:appuser /app &&
      mkdir -p /home/appuser/.local/bin &&
      mkdir -p /home/appuser/.azure &&
      cp -r /root/.azure/* /home/appuser/.azure/ || true &&
      chown -R appuser:appuser /home/appuser &&
      chown root:docker /var/run/docker.sock || true &&
      chmod 660 /var/run/docker.sock || true &&
      cd /app && bash /app/scripts/setup_container_config.sh &&
      su appuser -c '
        python -m venv /app/.venv &&
        . /app/.venv/bin/activate &&
        pip install --upgrade pip &&
        pip install -e . &&
        pip install docker azure-identity &&
        cp /app/.codestory.container.toml /app/.codestory.toml &&
        echo \"Starting Celery worker...\" &&
        cd /app && PYTHONPATH=/app python -m celery -A codestory.ingestion_pipeline.celery_app worker --loglevel=${WORKER_LOGLEVEL:-INFO} --concurrency=${WORKER_CONCURRENCY:-4} -Q ingestion
      '"
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "cd /app && . .venv/bin/activate && (celery -A codestory.ingestion_pipeline.celery_app inspect ping || celery -A codestory.ingestion_pipeline.celery_app inspect ping -d celery@$$(hostname) || exit 1)"]
      interval: 15s
      timeout: 15s
      retries: 15
      start_period: 180s
    environment:
      # Container network connection settings
      - NEO4J__URI=${NEO4J__URI}
      - NEO4J__USERNAME=${NEO4J__USERNAME}
      - NEO4J__PASSWORD=${NEO4J__PASSWORD}
      - NEO4J__DATABASE=${NEO4J__DATABASE}
      # Redis connection settings (Celery broker)
      - REDIS__URI=${REDIS__URI}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      # Azure OpenAI settings
      - AZURE_OPENAI__ENDPOINT=${AZURE_OPENAI__ENDPOINT}
      - AZURE_OPENAI__DEPLOYMENT_ID=${AZURE_OPENAI__DEPLOYMENT_ID}
      - AZURE_OPENAI__API_VERSION=${AZURE_OPENAI__API_VERSION}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      # Worker settings
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY}
      - WORKER_LOGLEVEL=${WORKER_LOGLEVEL}
      - C_FORCE_ROOT=${C_FORCE_ROOT}  # Allow running as root in container (for demo only)
      
  service:
    image: python:3.12-slim
    container_name: codestory-service
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      # Mount for repositories to be ingested - modify this path for your environment
      # Default mount for all repositories
      - ${REPOSITORY_PATH:-~/repositories}:/repositories
      # Specific repository mount for ingestion when set
      - ${REPOSITORY_SOURCE:-$HOME/repositories}:${REPOSITORY_DEST:-/repositories}
      # Mount Azure credentials
      - ~/.azure:/root/.azure
    working_dir: /app
    command: >
      bash -c "apt-get update && apt-get install -y curl build-essential gnupg lsb-release && 
      curl -sL https://aka.ms/InstallAzureCLIDeb | bash &&
      # Create a non-root user
      adduser --disabled-password --gecos '' appuser &&
      chown -R appuser:appuser /app &&
      mkdir -p /home/appuser/.local/bin &&
      mkdir -p /home/appuser/.azure &&
      cp -r /root/.azure/* /home/appuser/.azure/ || true &&
      chown -R appuser:appuser /home/appuser &&
      # Ensure container config exists
      cd /app && bash /app/scripts/setup_container_config.sh &&
      # Switch to the non-root user
      su appuser -c '
        python -m venv /app/.venv &&
        . /app/.venv/bin/activate &&
        pip install --upgrade pip &&
        pip install -e . &&
        pip install azure-identity azure-keyvault-secrets &&
        cp /app/.codestory.container.toml /app/.codestory.toml &&
        echo \"Patching adapters to ensure real implementations...\" &&
        python /app/patch_adapters.py &&
        echo \"Starting service with real adapters only...\" &&
        python -m codestory_service.main
      '"
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy
    environment:
      # Container network connection settings - use internal container names for networking
      - NEO4J__URI=${NEO4J__URI}
      - NEO4J__USERNAME=${NEO4J__USERNAME}
      - NEO4J__PASSWORD=${NEO4J__PASSWORD}
      - NEO4J__DATABASE=${NEO4J__DATABASE}
      - CODESTORY_CONFIG_PATH=${CODESTORY_CONFIG_PATH}
      # Redis connection settings
      - REDIS__URI=${REDIS__URI}
      - REDIS__HOST=${REDIS__HOST}
      - REDIS__PORT=${REDIS__PORT}
      # Celery settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      # Service settings - using standardized CODESTORY_SERVICE_ prefix
      - CODESTORY_SERVICE_HOST=${CODESTORY_SERVICE_HOST}
      - CODESTORY_SERVICE_PORT=${CODESTORY_SERVICE_PORT}
      - CODESTORY_SERVICE_DEV_MODE=${CODESTORY_SERVICE_DEV_MODE}
      # Force use of real adapters
      - USE_REAL_ADAPTERS=${USE_REAL_ADAPTERS}
      - CODESTORY_SERVICE_AUTH_ENABLED=${CODESTORY_SERVICE_AUTH_ENABLED}
      # Azure OpenAI settings
      - AZURE_OPENAI__ENDPOINT=${AZURE_OPENAI__ENDPOINT}
      - AZURE_OPENAI__DEPLOYMENT_ID=${AZURE_OPENAI__DEPLOYMENT_ID}
      - AZURE_OPENAI__API_VERSION=${AZURE_OPENAI__API_VERSION}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 120s

volumes:
  codestory_neo4j_data:
  codestory_neo4j_logs:
  codestory_neo4j_import:
  codestory_neo4j_plugins:
  codestory_redis_data: