version: '3.8'

services:
  neo4j:
    image: neo4j:5.20.0-enterprise
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_initial_dbms_default__database=neo4j
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes  # Required for enterprise edition
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - code_story_network

  redis:
    image: redis:7.2.4-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - code_story_network

  service:
    build:
      context: .
      dockerfile: infra/docker/service.Dockerfile
      target: production
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - REDIS_URI=redis://redis:6379
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - code_story_network

  worker:
    build:
      context: .
      dockerfile: infra/docker/service.Dockerfile
      target: worker
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - REDIS_URI=redis://redis:6379
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
    networks:
      - code_story_network

  mcp:
    build:
      context: .
      dockerfile: infra/docker/mcp.Dockerfile
      target: production
    environment:
      - CODE_STORY_SERVICE_URL=http://service:8000
      - AUTH_ENABLED=${AUTH_ENABLED:-true}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8001
      - MCP_WORKERS=${MCP_WORKERS:-4}
      - ENVIRONMENT=production
    restart: unless-stopped
    depends_on:
      service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - code_story_network

  gui:
    build:
      context: .
      dockerfile: infra/docker/gui.Dockerfile
      target: production
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
    restart: unless-stopped
    depends_on:
      - service
      - mcp
    networks:
      - code_story_network

  prometheus:
    image: prom/prometheus:v2.49.1
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - code_story_network

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  redis_data:
  prometheus_data:

networks:
  code_story_network:
    driver: bridge