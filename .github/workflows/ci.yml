name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
      - name: Lint with Ruff
        run: |
          git diff --name-only origin/main HEAD | grep -E '\.py$' | xargs -r poetry run ruff check
      - name: Check formatting with Ruff
        run: |
          git diff --name-only origin/main HEAD | grep -E '\.py$' | xargs -r poetry run ruff format --check
      - name: Type check with mypy
        run: |
          git diff --name-only origin/main HEAD | grep -E '\.py$' | grep -v 'tests/' | xargs -r poetry run mypy
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'gui/package-lock.json'
      - name: Install GUI dependencies
        working-directory: ./gui
        run: npm ci
      - name: Lint GUI code
        working-directory: ./gui
        run: |
          npm run lint
          npm run typecheck

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      neo4j:
        image: neo4j:5.13-community
        env:
          NEO4J_AUTH: neo4j/password
        ports:
          - 7474:7474
          - 7687:7687
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: |
          poetry install --no-interaction
      - name: Run unit tests
        run: poetry run pytest tests/unit -v
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      - name: Generate coverage report
        run: poetry run pytest tests/unit -v --cov=src --cov-report=xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  test-gui:
    name: GUI Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'gui/package-lock.json'
      - name: Install dependencies
        working-directory: ./gui
        run: npm ci
      - name: Run Vitest
        working-directory: ./gui
        run: npm test

  # Image building and pushing to registry - commented out for now
  # Uncomment and configure when ready for centralized image distribution
  #
  # build-images:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [test-python, test-gui]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push service image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: infra/docker/service.Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository }}/service:latest
  #           ghcr.io/${{ github.repository }}/service:${{ github.sha }}
  #         target: production
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         build-args: |
  #           ENVIRONMENT=production
  #     - name: Build and push worker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: infra/docker/service.Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository }}/worker:latest
  #           ghcr.io/${{ github.repository }}/worker:${{ github.sha }}
  #         target: worker
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         build-args: |
  #           ENVIRONMENT=production
  #     - name: Build and push MCP image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: infra/docker/mcp.Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository }}/mcp:latest
  #           ghcr.io/${{ github.repository }}/mcp:${{ github.sha }}
  #         target: production
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         build-args: |
  #           ENVIRONMENT=production
  #     - name: Build and push GUI image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: infra/docker/gui.Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository }}/gui:latest
  #           ghcr.io/${{ github.repository }}/gui:${{ github.sha }}
  #         target: production
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         build-args: |
  #           ENVIRONMENT=production